""" catch.py
    slide and catch updated
    msimpson
"""

import simpleGE
import random
import pygame

scene = simpleGE.Scene()

class Star(simpleGE.Sprite):
    def __init__(self, scene):
        super().__init__(scene)
        self.setImage("star.png")
        self.setSize(50, 50)
        self.minSpeed = 3
        self.maxSpeed = 8
        self.reset()
        
    def reset(self):
        self.y = 10
        
        
        self.x = random.randint(0, self.screenWidth)
        
        
        self.dy = random.randint (self.minSpeed, self.maxSpeed)
        
    def checkBounds(self):
        if self.bottom > self.screenHeight:
            self.reset()
        
        

class Alien(simpleGE.Sprite):
    def __init__(self, scene):
        super(). __init__(scene)
        self.setImage("Alien.png")
        self.setSize(125, 125)
        self.position = (320, 400)
        self.moveSpeed = 5
        

    def process(self):
        if self.isKeyPressed(pygame.K_LEFT):
            self.x -= self.moveSpeed
        if self.isKeyPressed(pygame.K_RIGHT):
            self.x += self.moveSpeed
            
class LblScore(simpleGE.Label):
    def __init__(self):
        super().__init__()
        self.text = "Stars: 0"
        self.center = (100, 30)
       
class LblTime(simpleGE.Label):
    def __init__(self):
        super().__init__()
        self.text = "Time left: 10"
        self.center = (500, 30)

class Game(simpleGE.Scene):
    def __init__(self):
        super().__init__()
        self.setImage("space.jpg")
        
        self.sndStar = simpleGE.Sound("kirby life.wav")
        self.numStars = 15
        self.score = 0
        self.lblScore = LblScore()
        
        self.timer = simpleGE.Timer()
        self.timer.totalTime = 10
        self.lblTime = LblTime()
        
        self.alien = Alien(self)
       
        self.stars = []
        for i in range(self.numStars):
            self.stars.append(Star(self))
            
        self.sprites = [self.alien,
                        self.stars,
                        self.lblScore,
                        self.lblTime]
    
    def process(self):
        for star in self.stars:
            if star.collidesWith(self.alien):
                star.reset()
                self.sndStar.play()
                self.score += 1
                self.lblScore.text = f"Score: {self.score}"
                
        self.lblTime.text = f"Time Left: {self.timer.getTimeLeft():.2f}"
        if self.timer.getTimeLeft() < 0:
            print(f"Score: {self.score}")
            self.stop()
        
class Instructions(simpleGE.Scene):
    def __init__(self, prevScore):
        super().__init__()
        
        self.prevScore = prevScore
        
        self.setImage("space.jpg")
        self.response = "Quit"
        
        self.directions = simpleGE.MultiLabel()
        self.directions.textLines = [
        "This is little Alien guy.",
        "They need to collect stars to power their spaceship",
        "Move with left and right arrow keys to collect the falling stars!",
        "Catch as many stars to send this little guy home.",
        "Before the time runs out!",
        "You got this!"]
        
        self.directions.center = (320, 250)
        self.directions.size = (620, 300)
        
        self.btnPlay = simpleGE.Button()
        self.btnPlay.text = "Play"
        self.btnPlay.center = (100, 350)
        
        self.btnQuit = simpleGE.Button()
        self.btnQuit.text = "Quit"
        self.btnQuit.center = (525, 350)
        
        self.lblScore = simpleGE.Label()
        self.lblScore.text = "Last Score: 0"
        self.lblScore.center = (320, 400)
        
        self.lblScore.text = f"Last Score: {self.prevScore}"
        
        self.sprites = [self.directions,
                        self.btnPlay,
                        self.btnQuit,
                        self.lblScore]
 
    def process(self):
        if self.btnPlay.clicked:
            self.response = "Play"
            self.stop()
            
        if self.btnQuit.clicked:
            self.response = "Quit"
            self.stop()
 
def main():
    
    keepGoing = True
    lastScore = 0
    
    while keepGoing:
        instructions = Instructions(lastScore)
        instructions.start()
        
        if instructions.response == "Play":
           game = Game()
           game.start()
           lastScore = game.score 
           
        else:
            keepGoing = False
    
if __name__ == "__main__":
    main()
